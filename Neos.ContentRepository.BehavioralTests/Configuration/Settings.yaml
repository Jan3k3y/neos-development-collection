
Neos:
  # To detect race conditions, enable the code block below, and set raceConditionTracker.enabled to TRUE
  # and then use ./flow raceConditionTracker:analyzeTrace
  #ContentRepositoryRegistry:
  #  presets:
  #    'default':
  #        contentGraphProjection:
  #          catchUpHooks:
  #            'Neos.ContentRepository.BehavioralTests:RaceConditionTracker':
  #              factoryObjectName: Neos\ContentRepository\BehavioralTests\ProjectionRaceConditionTester\RaceTrackerCatchUpHookFactory

  ContentRepository:
    BehavioralTests:
      raceConditionTracker:
        enabled: false
        redis:
          host: 127.0.0.1
          port: 6379

  ContentRepositoryRegistry:
    contentRepositories:
      test_parallel:
        eventStore:
          factoryObjectName: Neos\ContentRepositoryRegistry\Factory\EventStore\DoctrineEventStoreFactory

        nodeTypeManager:
          factoryObjectName: Neos\ContentRepository\BehavioralTests\TestSuite\Behavior\GherkinPyStringNodeBasedNodeTypeManagerFactory

        contentDimensionSource:
          factoryObjectName: Neos\ContentRepositoryRegistry\Factory\ContentDimensionSource\ConfigurationBasedContentDimensionSourceFactory
          options:
            contentDimensions: []

        userIdProvider:
          factoryObjectName: Neos\ContentRepositoryRegistry\Factory\UserIdProvider\StaticUserIdProviderFactory

        clock:
          factoryObjectName: Neos\ContentRepositoryRegistry\Factory\Clock\SystemClockFactory

        propertyConverters:
          DateTimeNormalizer:
            className: Symfony\Component\Serializer\Normalizer\DateTimeNormalizer
          ScalarNormalizer:
            className: Neos\ContentRepository\Core\Infrastructure\Property\Normalizer\ScalarNormalizer
        #  EnumNormalizer:
        #    className: Symfony\Component\Serializer\Normalizer\BackedEnumNormalizer
        #  ArrayNormalizer:
        #    className: Neos\ContentRepository\Core\Infrastructure\Property\Normalizer\ArrayNormalizer
        #  UriNormalizer:
        #    className: Neos\ContentRepository\Core\Infrastructure\Property\Normalizer\UriNormalizer
        #  ValueObjectArrayDenormalizer:
        #    className: Neos\ContentRepository\Core\Infrastructure\Property\Normalizer\ValueObjectArrayDenormalizer
        #  ValueObjectBoolDenormalizer:
        #    className: Neos\ContentRepository\Core\Infrastructure\Property\Normalizer\ValueObjectBoolDenormalizer
        #  ValueObjectFloatDenormalizer:
        #    className: Neos\ContentRepository\Core\Infrastructure\Property\Normalizer\ValueObjectFloatDenormalizer
        #  ValueObjectIntDenormalizer:
        #    className: Neos\ContentRepository\Core\Infrastructure\Property\Normalizer\ValueObjectIntDenormalizer
        #  ValueObjectStringDenormalizer:
        #    className: Neos\ContentRepository\Core\Infrastructure\Property\Normalizer\ValueObjectStringDenormalizer
        #  DoctrinePersistentObjectNormalizer:
        #    className: Neos\ContentRepositoryRegistry\Infrastructure\Property\Normalizer\DoctrinePersistentObjectNormalizer
        #  CollectionTypeDenormalizer:
        #    className: Neos\ContentRepository\Core\Infrastructure\Property\Normalizer\CollectionTypeDenormalizer
        #  ProxyAwareObjectNormalizer:
        #    className: Neos\ContentRepositoryRegistry\Infrastructure\Property\Normalizer\ProxyAwareObjectNormalizer

        contentGraphProjection:
          # NOTE: This introduces a soft-dependency to the neos/contentgraph-doctrinedbaladapter package, but it can be overridden when a different adapter is used
          factoryObjectName: Neos\ContentGraph\DoctrineDbalAdapter\DoctrineDbalContentGraphProjectionFactory



 # ContentRepositoryRegistry:
 #   contentRepositories:
 #     test_parallel:
 #       # todo new presets "gherkin" and/or "testing"
 #       preset: default
 #       contentDimensions: []
 #       # todo simple NodeType configuration here inline? Or respect that from the NT manager?
 #       userIdProvider:
 #         factoryObjectName: 'Neos\ContentRepository\BehavioralTests\TestSuite\Behavior\FakeUserIdProviderFactory'
 #       clock:
 #         factoryObjectName: 'Neos\ContentRepository\BehavioralTests\TestSuite\Behavior\FakeClockFactory'
 #       nodeTypeManager:
 #         factoryObjectName: 'Neos\ContentRepository\BehavioralTests\TestSuite\Behavior\GherkinPyStringNodeBasedNodeTypeManagerFactory'
#
  Flow:
    object:
      includeClasses:
        # do NOT include PhpstanRules here
        'Neos.ContentRepository.BehavioralTests': [ 'Neos\\ContentRepository\\BehavioralTests\\(Command|ProjectionRaceConditionTester)' ]
